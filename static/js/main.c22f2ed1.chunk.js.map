{"version":3,"sources":["TodoList.js","TodoCreateForm.js","App.js","serviceWorker.js","index.js"],"names":["trash","className","width","height","viewBox","fill","xmlns","d","fillRule","checkmark","fill-rule","TodoList","props","useState","taskEdit","setTaskEdit","onEditTaskChange","e","name","target","value","taskSave","task","onTaskSave","todos","map","el","key","id","done","type","onChange","onClick","disabled","trim","onTaskDoneToggle","onTaskDelete","TodoCreateForm","setTask","style","padding","console","log","onTaskCreate","initialTodos","App","setTodos","updatedTodos","push","Math","random","filter","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c22f2ed1.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport './App.css';\n\nconst trash = (<svg className=\"bi bi-trash\" width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" fill=\"currentColor\"\n                   xmlns=\"http://www.w3.org/2000/svg\">\n    <path\n        d=\"M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z\"/>\n    <path fillRule=\"evenodd\"\n          d=\"M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4L4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z\"/>\n</svg>)\n\nconst pencil = (<svg className=\"bi bi-pencil\" width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" fill=\"currentColor\"\n     xmlns=\"http://www.w3.org/2000/svg\">\n    <path fill-rule=\"evenodd\"\n          d=\"M11.293 1.293a1 1 0 0 1 1.414 0l2 2a1 1 0 0 1 0 1.414l-9 9a1 1 0 0 1-.39.242l-3 1a1 1 0 0 1-1.266-1.265l1-3a1 1 0 0 1 .242-.391l9-9zM12 2l2 2-9 9-3 1 1-3 9-9z\"/>\n    <path fill-rule=\"evenodd\"\n          d=\"M12.146 6.354l-2.5-2.5.708-.708 2.5 2.5-.707.708zM3 10v.5a.5.5 0 0 0 .5.5H4v.5a.5.5 0 0 0 .5.5H5v.5a.5.5 0 0 0 .5.5H6v-1.5a.5.5 0 0 0-.5-.5H5v-.5a.5.5 0 0 0-.5-.5H3z\"/>\n</svg>)\nconst checkmark = (<svg className=\"bi bi-check-square\" width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" fill=\"currentColor\"\n                       xmlns=\"http://www.w3.org/2000/svg\">\n    <path fill-rule=\"evenodd\"\n          d=\"M14 1H2a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1zM2 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H2z\"/>\n    <path fill-rule=\"evenodd\"\n          d=\"M10.97 4.97a.75.75 0 0 1 1.071 1.05l-3.992 4.99a.75.75 0 0 1-1.08.02L4.324 8.384a.75.75 0 1 1 1.06-1.06l2.094 2.093 3.473-4.425a.236.236 0 0 1 .02-.022z\"/>\n</svg>)\n\nfunction TodoList(props) {\n\n     const [taskEdit, setTaskEdit] = useState({});\n\n     const editMode = (task) => {\n         setTaskEdit(task)\n     };\n\n     const onEditTaskChange = (e) => {\n          setTaskEdit({...taskEdit, name: e.target.value})\n     };\n\n     const taskSave = (task) => {\n         props.onTaskSave(taskEdit);\n         setTaskEdit({});\n     };\n\n  return (\n    <div className=\"TodoList\" >\n\n        <ul className=\"list-group\" >\n            {props.todos.map(el => <li key={el.id} className=\"list-group-item\"\n            >\n                {el.done ? checkmark : null}\n\n                {\n                    taskEdit.id === el.id\n                      ? <>\n                        <input type=\"text\" value={taskEdit.name} onChange={onEditTaskChange}/>\n                        <button onClick={taskSave} disabled={!taskEdit.name.trim()}>Save</button>\n\n                      </>\n                      : <span onClick={() => editMode(el)}>{el.name}</span>\n                }\n\n            <button onClick={() => props.onTaskDoneToggle(el.id)}>\n                {el.done ? 'Undone' : 'Done'}\n            </button>\n\n            <button onClick={() => props.onTaskDelete(el.id)} >{trash}</button>\n\n            </li>)\n            }\n        </ul>\n    </div>\n  );\n}\n\nexport default TodoList;\n","import React, {useState} from 'react';\nimport './App.css';\n\n\nfunction TodoCreateForm(props) {\nconst [task, setTask] = useState('');\n\nconst addTask = () => {\n    console.log(task);\n    props.onTaskCreate(task);\n    setTask(\"\");\n\n}\n\n  return (\n    <div className=\"TodoCreateForm\" >\n        <ul className=\"list-group\"  style={{padding:\"20px\"}}>\n\n       <input type=\"text\"  value={task} onChange={e => setTask(e.target.value)}/>\n       <button  onClick={addTask} disabled={task.trim() === ''}>Add Task</button>\n\n        </ul >\n    </div>\n  );\n}\n\nexport default TodoCreateForm;\n","import React, {useState} from 'react';\nimport './App.css';\nimport TodoList from \"./TodoList\";\nimport TodoCreateForm from \"./TodoCreateForm\";\n\n\nconst initialTodos = [\n  {id: 1, name: 'Call Mom', done: false},\n  {id: 2, name: 'Go shopping', done: true},\n  {id: 3, name: 'Do laundry', done: false},\n  {id: 4, name: 'Learn react', done: false},\n  {id: 5, name: 'Watch lecture', done: false},\n];\nfunction App() {\n\n    const [todos, setTodos] = useState(initialTodos);\n\n    const onTaskCreate = (task) => {\n        console.log('APP ' + task);\n        const updatedTodos = [...todos];\n        updatedTodos.push({id: Math.random(), name: task, done: false});\n        setTodos(updatedTodos);\n    };\n\n    const onTaskDelete = (id) => {\n        const updatedTodos = todos.filter(el => el.id !==id);\n        setTodos(updatedTodos);\n    };\n\n    const onTaskDoneToggle = (id) => {\n        const updatedTodos = todos.map(el => {\n            if(el.id === id) return { ...el, done: !el.done}\n            else return el;\n        });\n        setTodos(updatedTodos);\n    };\n\n    const onTaskSave = (task) => {\n        const updatedTodos = todos.map(el => {\n            if (el.id === task.id) return {...el, name: task.name};\n            else return el;\n        });\n        setTodos(updatedTodos);\n    };\n\n  return (\n    <div className=\"App\">\n\n     <TodoCreateForm onTaskCreate={onTaskCreate}/>\n     <TodoList todos={todos}\n               onTaskDelete={onTaskDelete}\n               onTaskDoneToggle={onTaskDoneToggle}\n               onTaskSave={onTaskSave}/>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}